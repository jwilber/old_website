system.time(monte_carlo(10000000))
system.time(monte_carlo(10000))
system.time(monte_carlo_vec(10000))
microbenchmark(monte_carlo(10000), monte_carlo_vec(10000))
microbenchmark(unit="s",monte_carlo(10000), monte_carlo_vec(10000))
system.time(monte_carlo(10000))
system.time(monte_carlo_vec(10000))
?system.time
args(system.time)
?proc.time
?try
try(1+1)
try(1+1, silent=T)
try(1 + "1", silent = TRUE)
good <- try(1+1, silent=TRUE)
bad  <- try(1 + "1", silent = TRUE)
good
bad
print good
print(good)
print(bad)
if(class(bad) == "try-error")
print(" bad has class try-error")
warnings(mean(NULL))
mean(NULL)
suppressWarnings(mean(NULL))
suppressWarnings(mean(NULL))
install.packages("httr")
library(httr)
GET("http://google.com/")
goo <- GET("http://google.com/")
goo
GET("http://google.com/madeup")
GET("http://google.com/madeu3141p")
GET("https://bookdown.org/csgillespie/efficientR/programming.html#fig:3-1")
GET("https://bookdown.org/csgillespie/efficientR/programming.html#fig:3-1414")
GET("google1.cm")
stop(mean(c(1,2)))
stop(mean(c(5,5,5,5,5)))
?message
args(stop)
?stop
stop(mean(c(5,5,5,5,5)))
stop(mean(c(5,5,5,5,5)), call=F)
stop(mean(c(5,5,5,5,5)), call=T)
myFactorial <- function(n) {
if(n < 0){
stop("The argument n must be positive)")
} else if(n != round(n)) {
warning('The factorial function was used')
return(factorial(n))
} else if(n > 0) {
return(n * Recall(n-1))
} else {
return(1)
}
}
myFactorial(2)
myFactorial(3)
system.time(myFactorial(10))
system.time(myFactorial(100))
system.time(myFactorial(1000))
system.time(myFactorial(-1))
system.time(myFactorial(.4))
myfact <- function(n) {
if(n == 1) {
return(1)
} else {
return( n * Recall(n-1))
}
}
myfact(10)
myfact(2)
myfact(3)
stop("warning message")
stop("this is an error message", call=F)
stop("this is an error message", call=T)
stop("this is an example of an error message")
message("th")
floor(@)
floor(2)
myfact <- function(n) {
if(n < 0) {
stop("Factorial is only defined for positive numbers")
} else if(n == 1) {
return(1)
} else if(n != floor(n) {
stop("Factorial is only defined for whole numbers")
} else {
return( n * Recall(n-1))
}
}
myfact <- function(n) {
if(n < 0) {
stop("Factorial is only defined for positive numbers")
} else if(n == 1) {
return(1)
} else if(n != floor(n) {
stop("Factorial is only defined for whole numbers")
} else {
return( n * Recall(n-1))
}
}
myfact <- function(n) {
if(n < 0) {
stop("Factorial is only defined for positive numbers")
} else if(n == 1) {
return(1)
} else if(n != floor(n) {
stop("Factorial is only defined for whole numbers")
myfact <- function(n) {
if(n < 0) {
stop("Factorial is only defined for positive numbers")
} else if(n == 1) {
return(1)
x <- c(2,3,6,4,8,8,9,2,5,6)
y <- c(110, 112, 114, 112, 117, 115, 115, 116, 111, 111)
x <- c(2,3,6,4,8,8,9,2,5,6)
y <- c(110, 112, 114, 112, 117, 115, 115, 116, 111, 111)
print(x,y)
cat("x ", x)
cat("\n y: ", y)
df <- data.frame(x = x, y = y)
df
library(ggplot2)
ggplot(data = df, aes(x,y)) + geom_point()
ggplot(data = df, aes(x,y)) + geom_point(color='skyblue1')+ labs(title="This is a title", x= "this is a x axis", y = "this is the y label")
ggplot(data = df, aes(x,y)) + geom_point(color='corralred')+ labs(title="This is a title", x= "this is a x axis", y = "this is the y label")
ggplot(data = df, aes(x,y)) + geom_point(color='coralred')+ labs(title="This is a title", x= "this is a x axis", y = "this is the y label")
ggplot(data = df, aes(x,y)) + geom_point(color='royalblue')+ labs(title="This is a title", x= "this is a x axis", y = "this is the y label")
ggplot(data = df, aes(x,y)) + geom_point(color='royalblue')+ labs(title="This is a title", x= "this is a x axis", y = "this is the y label") + theme_wsj()
ggplot(data = df, aes(x,y)) + geom_point(color='royalblue')+ labs(title="This is a title", x= "this is a x axis", y = "this is the y label") + theme_economist()
ggplot(data = df, aes(x,y)) + geom_point(color='royalblue')+ labs(title="This is a title", x= "this is a x axis", y = "this is the y label") + theme_wsj()
install.packages("sp")
install.packages("raster")
install.packages("rasterVis")
install.packages("maptools")
install.packages("rgeos")
libs <- c("sp", "raster", "rasterVis", "maptools", "rgeos")
library(libs)
seq_along(libs) print libs
seq_along(libs) print(libs)
for(i in seq_along(libgs)) print(i)
for(i in seq_along(libs)) print(i)
for(i in libs) print(i)
for(i in libs) library(i)
libs <- c(sp, raster, rasterVis, maptools, rgeos)
library(c(sp, raster, rasterVis, maptools, rgeos))
library(sp); library(raster); library(rasterVis); library(maptools); library(rgeos)
library(dismo)
install.packages("dismo")
mymap <- gmap("Germany")
plot(mymap)
library(dismo)
mymap <- gmap("Germany")
install.packages("rgdal")
library(dismo); library(rgdal)
mymap <- gmap("Germany")
install.packages("XML")
library(dismo); library(rgdal); library(XML)
mymap <- gmap("Germany")
plot(mymap)
mymap <- gmap("France")
plot(mymap)
mymap <- gmap("USA")
plot(mymap)
?gmap
mymap <- gmap("France", type="terrain")
plot(mymap)
mymap2 <- gmap("France", type = "satellite")
plot(mymap2)
mymap3 <- gmap("France", type = "roadmap")
plot(mymap3)
mymap4 <- gmap("France", type = "hybrid")
plot(mymap4)
plot(mymap)
plot(mymap2)
plot(mymap3)
plot(mymap4)
mymap4 <- gmap("US", type = "hybrid")
plot(mymap4)
?gmap
mymap4 <- gmap("US", type = "hybrid", exp=2)
plot(mymap4)
mymap4 <- gmap("US", type = "hybrid", exp=3)
plot(mymap4)
mymap4 <- gmap("US", type = "hybrid", exp=.4)
plot(mymap4)
mymap <- gmap("Europe"); plot(mymap)
mymap <- gmap(select.area)
??select.area
install.packages("RgoogleMaps")
library(RgoogleMaps)
newmap <- GetMap(center = c(36.7, -5.9), zoom = 10, destfile = "newmap.png",
newmap <- GetMap(center = c(36.7, -5.9), zoom = 10, destfile = "newmap.png",
newmap <- GetMap(center = c(36.7, -5.9), zoom = 10, destfile = "newmap.png",
maptype = "satellite")
newmap
plot(newmap)
PlotOnStaticMap(lat = c(36.3, 35.8, 36.4), lon = c(-5.5, -5.6, -5.8), zoom=10,
cex=4, pch=19, col="red", FUN=points, add=F)
?PlotOnStaticMap
PlotOnStaticMap(lat = c(36.3, 35.8, 36.4), lon = c(-5.5, -5.6, -5.8), zoom=10,
cex=4, pch=19, col="red", FUN=points, add=F, size=c(640,640))
install.packages("googleVis")
library(googleVis)
install.packages(googleVis)
install.packages("googleVis")
install.packages("devtools")
library(devtools)
install_github("mages/googleVis")
library(googleVis)
rm(list=ls())
data("Exports")
print( Exports)
data("Exports")
print( Exports)
Geo <- gvisGeoMap(Exports, locationvar = "Country", numvar="Profit",
options = list(height=400, dataMode = "regions"))
plot(Geo)
counts <- c("Germany", "Brazil", "United States", "Lebanon", "Spain", "Mexico", "Mali",
"China", "Japan", "Thailand", "Eritrea", "France", "Saudi Arabia", "Peru")
prof <- sample(1:50, 14)
mydf <- data.frame(counts=counts, prof=prof)
print( mydf)
Geo <- gvisGeoMap(mydf, locationvar = "counts", numvar="prof")
plot(Geo)
data(Andrew)
Andrew
head(Andrew)
dim(Andrew)
head(Andrew[,:7])
head(Andrew[,1:7])
options = list(showTip=T, showline=F, enableScrollWheel=F,
mapType = "satellite", width=800, height=400))
M1 <- gvisMap(Andrew, "LatLong", "Tip",
options = list(showTip=T, showline=F, enableScrollWheel=F,
mapType = "satellite", width=800, height=400))
plot(M1)
M1 <- gvisMap(Andrew, "LatLong", "Tip",
options = list(showTip=T, showline=T, enableScrollWheel=F,
mapType = "satellite", width=800, height=400))
plot(M1)
M1 <- gvisMap(Andrew, "LatLong", "Tip",
options = list(showTip=T, showline=T, enableScrollWheel=T,
mapType = "satellite", width=800, height=400))
plot(M1)
install.packages("rworldmap")
library(rworldmap)
?mapCountryData
newmap <- getMap(resolution(="coarse"))
library(rworldmap)
library(rworldmap)
require(rworldmap)
install.packages("spam")
require(rworldmap)
install.packages("rworldmap")
newmap <- getMap(resolution="coarse")
library(rworldmap)
install_github("AndySouth/rworldmap")
install.packages("spam")
library(spam)
installed.packages()
newmap <- getMap(resolution="coarse")
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
plot(Geo)
plot(M1)
Andrew
library(rworldmap)
old.packages()
install.packages("spam")
brew reinstall gcc48 --with-fortran
gfortran -v
exp(.37)
exp(.37) * (-1/(1.37)**2)
x <- rpois(100, 1.2)
y <- rpois(100, 1.2)
plot(x,y, '+')
plot(x,y)
rpois(100,1.2)
plot(x,y, xlim=c(0,10), ylim = c(0,10))
?rpois
q <- ((.5)*(.25) + (.1)*(.3) + .6)
1 / (1 + e^-q)
1 / (1 + exp(-q))
q <- ((.5)*(.25) + (.1)*(.3) + .35)
1 / (1 + exp(-q))
q <- ((.05)*(.25) + (.1)*(.3) + .35)
1 / (1 + exp(-q))
q <- ( (.59326*.4 + .5968*.45 )+ .6)
1 / (1 + exp(-q))
q <- ( (.59326*.5 + .5968*.55 )+ .6)
1 / (1 + exp(-q))
(1/2) * (.99 - .7729)**2
DT <- data.table(A = 1:6, B = c("a","b","c"), C = rnorm(6), D=TRUE)
library(data.table)
DT
DT <- data.table(A = 1:6, B = c("a","b","c"), C = rnorm(6), D=TRUE)
DT
DT[3:5,] # same as DT[3:5]
DT
DT = data.table(A = c(1:5), B = letters[1:5], C= c(6:10))
DT
DT = data.table(A = c(1:5L), B = letters[1:5], C= c(6:10))
DT
tapply(DT[,A], class)
apply(DT[,A], class)
sapply(DT[,A], class)
DT[,A]
apply(DT,2,class)
class(DT[,.(A)])
DT[, .(B, C=sum(C))]
3
4
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
DT
DT[.N]
DT
DT[1l:3]
DT[1:3,]
DT[1:3,c(A,B)]
DT[1:3,A]
DT[1:3,.(A,B)]
DT
install.packages('carret')
install.packages('caret')
library(caret)
install.packags('quantreg')
install.packages('quantreg')
library(quantreg)
library(caret)
body(mean)
body(sd())
body(sd)
environment(mean)
f <- function(x) { print(x)}
f(5)
body(f) <- print('a')
f
f(4)
srcref(mean)
?srcref
srcref(sd)
srcref(mean())
formals(mean)
formals(sum)
formals(diff)
formals(prod)
type(f)
class(f)
is.base(f)
?base
help.search("base")
base(f)
isbase(f)
is.primitive(f)
objs <- mget(ls("package:base"), inherits=T)
funs <- Filter(is.function, objs)
funs
prim <- Filter(is.primitive, funs)
prim
formals(max)
body(max)
environments(min)
environment(min)
?Filter
Filter(is.na, c(1,2,4,3,6))
Filter(is.na, c(1,2,4,3,6, NA))
(1/13)*(1/12)
(1/13)*(1/12)
(1/13)*(1/12)*
4
12/51
factorial(10)
.25*.25*111.1
.25**2
.25**2 * 111.1
111.1 * .25
111.1 * .025
(111.1 * .025) * (111.1 * 0.25)
rm(list= ls)
rm(list= ls())
source('~/Desktop/pubpol275/lab5/HSIANG_lab5/part2.R', echo=TRUE)
??knn.index
library(FNN)
source('~/Desktop/pubpol275/lab5/HSIANG_lab5/part2.R', echo=TRUE)
dists
stem(house_axis, pol_values[n_neighbor],xlim=c(-5,5), ylim = c(-3,18),
col=4,linecol=4,clinecol=2, main = "Nearest Neighbor Stem Plot")
par(add=T)
points(home, pol_values, col = "coral",
pch=13, cex=3)
y = x
source('~/Desktop/pubpol275/lab5/HSIANG_lab5/part2.R', echo=TRUE)
stem(home, pol_values, xlim=c(-5,5), ylim = c(-5,20),
col=4,linecol=4,clinecol=2, main = "Initial Stem Plot")
house_axis <- -5:5
pol_values = c( -4, -1, 0, 3)
n1 <- length(house_axis)
n_neighbor = vector(mode = "numeric", length = 11)
for (i in 1:n1) {
print(i)
n_neighbor[i] = knnx.index(pol_values, house_axis[i],1)
}
stem(house_axis, pol_values[n_neighbor],xlim=c(-5,5), ylim = c(-3,18),
col=4,linecol=4,clinecol=2, main = "Nearest Neighbor Stem Plot")
par(add=T)
points(home, pol_values, col = "coral",
pch=13, cex=3)
source('~/Desktop/pubpol275/lab5/HSIANG_lab5/part2.R', echo=TRUE)
stem(house_axis, pol_levels[n_neighbor],xlim=c(-5,5), ylim = c(-3,18),
col=4,linecol=4,clinecol=2, main = "Nearest Neighbor Stem Plot")
pol_levels <- c(17.2, 3.4, 2, -1)
n1 <- length(house_axis)
n_neighbor = vector(mode = "numeric", length = 11)
for (i in 1:n1) {
print(i)
n_neighbor[i] = knnx.index(pol_values, house_axis[i],1)
}
stem(house_axis, pol_levels[n_neighbor],xlim=c(-5,5), ylim = c(-3,18),
col=4,linecol=4,clinecol=2, main = "Nearest Neighbor Stem Plot")
par(add=T)
points(home, pol_values, col = "coral",
pch=13, cex=3)
pol_levels
n_neighbor
pol_levels
pol_values = c( -4, -1, 0, 3)
pol_levels <- c(17.2, 3.4, 2, -1)
n1 <- length(house_axis)
n_neighbor = vector(mode = "numeric", length = 11)
for (i in 1:n1) {
print(i)
n_neighbor[i] = knnx.index(pol_values, house_axis[i],1)
}
stem(house_axis, pol_levels[n_neighbor],xlim=c(-5,5), ylim = c(-3,18),
col=4,linecol=4,clinecol=2, main = "Nearest Neighbor Stem Plot")
par(add=T)
points(home, pol_values, col = "coral",
pch=13, cex=3)
house_axis <- -5:5
pol_values = c( -4, -1, 0, 3)
pol_levels <- c(17.2, 3.4, 2, -1)
n1 <- length(house_axis)
n_neighbor = vector(mode = "numeric", length = 11)
for (i in 1:n1) {
print(i)
n_neighbor[i] = knnx.index(pol_values, house_axis[i],1)
}
stem(house_axis, pol_levels[n_neighbor],xlim=c(-5,5), ylim = c(-3,18),
col=4,linecol=4,clinecol=2, main = "Nearest Neighbor Stem Plot")
par(add=T)
points(home, pol_levels, col = "coral",
pch=13, cex=3)
pol_levels[n_neighbor]
library(xtable)
15*35000
reg_table <- xtable(mcb)
print(reg_table, type = "latex", file = "reg-table.tex")
print(reg_table, type = "html", file = "reg-table.html")
source('~/.active-rstudio-document', echo=TRUE)
reg_table
mcb
print(reg_table, type = "latex", file = "reg-table.tex")
print(reg_table, type = "latex")
print(reg_table, type = "html")
mcb
reg_table <- xtable(mcb)
reg_table
print(reg_table, type = "html")
print(mcv)
print(mcb)
mcb <- print(microbenchmark(no_cache(c(1:1000)), si_cache(c(1:1000)), mem_cache(c(1:1000))))
print(reg_table, type = "html")
mcb
microbenchmark(cum_prod_init(c(1:10000)), cum_prod_grow(c(1:10000)), times=100)
time_start <- proc.time()
x <- runif(100)
y <- rnorm(200)
z <- rpois(400, lambda=2)
r <- sum(x,y,z)
proc.time() - time_start
microbenchmark( sd1, sd2, sd3, sd4, sd5, times=10000)
system.time(for(i in 1:1000) mean(sample(1:1000, 100)))
microbenchmark( sd1, sd2, sd3, sd4, sd5, times=10000)
microbenchmark( sd1, sd2, sd3, sd4, sd5, times=10000)
microbenchmark( sd1, sd2, sd3, sd4, sd5, times=10000)
microbenchmark( sd1, sd2, sd3, sd4, sd5, times=10000)
set.seed(100)
x   <- rnorm(10000)
sd1 <- sd(x)
sd2 <- sqrt( var(x) )
sd3 <- var(x) ^ (1/2)
sd4 <- '^'(var(x), .5)
sd5 <- sqrt( sum( (x - mean(x))^2) / (length(x) - 1) )
microbenchmark( sd1, sd2, sd3, sd4, sd5, times=10000)
set.seed(100)
x   <- rnorm(10000)
sd1 <- sd(x)
sd2 <- sqrt( var(x) )
sd3 <- var(x) ^ (1/2)
sd4 <- '^'(var(x), .5)
sd5 <- sqrt( sum( (x - mean(x))^2) / (length(x) - 1) )
microbenchmark( sd1, sd2, sd3, sd4, sd5, times=10000)
mcb <- print(microbenchmark(no_cache(c(1:1000)), si_cache(c(1:1000)), mem_cache(c(1:1000))))
2200/3000
22000/3000
3000/175
22000/175
